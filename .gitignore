import streamlit as st
import pandas as pd
import numpy as np
import time
from datetime import datetime
import os
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split

# Page configuration
st.set_page_config(page_title="TopstepX AI Signals", layout="centered")
st.title("üìà TopstepX AI Trade Signal Assistant")

# Configuration constants
CSV_FILE = "/storage/emulated/0/Download/Sample_Intraday.csv"  # Path to cleaned or raw CSV
LOG_FILE = "trade_log.csv"
MAX_CONTRACTS = 3
TRADING_END_HOUR = 21  # UTC
MIN_CONFIDENCE = 60

# === Feature Engineering ===
def compute_rsi(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def add_features(df):
    df['ema_fast'] = df['close'].ewm(span=10).mean()
    df['ema_slow'] = df['close'].ewm(span=21).mean()
    df['rsi'] = compute_rsi(df['close'])
    df['macd'] = df['ema_fast'] - df['ema_slow']
    df['price_diff'] = df['close'].diff()
    df['volume_change'] = df['volume'].pct_change()
    df.dropna(inplace=True)
    return df

def generate_labels(df):
    df['label'] = 0
    df.loc[(df['ema_fast'] > df['ema_slow']) & (df['rsi'] < 70), 'label'] = 1
    df.loc[(df['ema_fast'] < df['ema_slow']) & (df['rsi'] > 30), 'label'] = -1
    return df

def prepare_ml_data(df):
    features = ['ema_fast', 'ema_slow', 'rsi', 'macd', 'price_diff', 'volume_change']
    X = df[features]
    y = df['label']
    return X, y

def train_model(X, y):
    model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', verbosity=0)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
    model.fit(X_train, y_train)
    return model

def predict_signals(model, df):
    features = ['ema_fast', 'ema_slow', 'rsi', 'macd', 'price_diff', 'volume_change']
    X = df[features]
    preds = model.predict(X)
    probs = model.predict_proba(X).max(axis=1)
    df['signal'] = preds
    df['confidence'] = probs * 100
    df['signal_str'] = df['signal'].map({1: 'BUY', -1: 'SELL', 0: 'HOLD'})
    return df

# === Caching Functions ===
@st.cache_data(ttl=60)
def load_data():
    try:
        if os.path.exists(LOG_FILE):
            return pd.read_csv(LOG_FILE, parse_dates=['timestamp'])
        else:
            return pd.DataFrame()
    except Exception as e:
        st.error(f"Error loading log: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=60)
def is_trade_time():
    now = datetime.utcnow()
    return now.hour < TRADING_END_HOUR

# === Main Execution ===
try:
    if not os.path.exists(CSV_FILE):
        st.error(f"Data file not found: {CSV_FILE}")
        st.info("Upload or place the CSV with columns: Time, Last, Volume")
    else:
        df = pd.read_csv(CSV_FILE)

        # === Fix column names and format ===
        df.rename(columns={'Time': 'datetime', 'Last': 'close', 'Volume': 'volume'}, inplace=True)
        df['datetime'] = pd.to_datetime(df['datetime'])
        df.set_index('datetime', inplace=True)

        # === Feature & Signal Engineering ===
        df = add_features(df)
        df = generate_labels(df)
        X, y = prepare_ml_data(df)
        model = train_model(X, y)
        df = predict_signals(model, df)

        # === Save to log ===
        if not os.path.exists(LOG_FILE):
            with open(LOG_FILE, 'w') as f:
                f.write("timestamp,signal,confidence,price\n")

        latest_rows = df.tail(10)
        with open(LOG_FILE, 'w') as f:
            f.write("timestamp,signal,confidence,price\n")
            for idx, row in latest_rows.iterrows():
                f.write(f"{idx},{row['signal_str']},{row['confidence']:.2f},{row['close']:.2f}\n")

        # === Dashboard Display ===
        df_log = load_data()
        if df_log.empty:
            st.warning("No signals generated yet...")
        else:
            latest = df_log.iloc[-1]
            valid_time = is_trade_time()
            is_confident = latest['confidence'] >= MIN_CONFIDENCE
            status = "‚úÖ VALID TRADE" if valid_time and is_confident else "‚õî BLOCKED"

            st.metric(
                label=f"üìç Latest Signal ‚Äî {status}",
                value=latest['signal'].upper(),
                delta=f"{latest['confidence']:.2f}% Confidence"
            )

            if not valid_time:
                st.error("üö´ Outside trading hours")
            if not is_confident:
                st.warning(f"‚ö†Ô∏è Below confidence threshold ({MIN_CONFIDENCE}%)")

            st.write("## üïì Recent Signal History")
            st.dataframe(
                df_log.tail(20).sort_values(by="timestamp", ascending=False),
                use_container_width=True
            )

            st.write("## üìä Signal Confidence Distribution")
            st.bar_chart(df_log['confidence'])

            st.write("## üìà Signal Count Summary")
            st.dataframe(df_log['signal'].value_counts().rename_axis('signal').reset_index(name='count'))

except FileNotFoundError:
    st.error("CSV not found. Please upload the file.")
except KeyError as e:
    st.error(f"Missing required column: {e}")
    st.info("Expected columns: Time, Last, Volume")
except Exception as e:
    st.error(f"Unexpected error: {e}")
    st.info("Check file format and data quality.")
